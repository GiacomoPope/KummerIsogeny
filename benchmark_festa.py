import time
from tabulate import tabulate

from sage.all import *

from kummer_line import KummerLine
from kummer_isogeny import KummerLineIsogeny

proof.all(False)

# FESTA-128 Prime
p = ZZ(
    0x176C11CF13E54B11406FCEC87BD4C1480F2BF6B3CF47C54370FEBD1C756E54F72C1501712922BAF5993402979D50DD13D09A841FED4773CFDB168F19A73E323F656921D7DCD797059B7B9AC3245C4D7BE6B343FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
)

# Compute curve
F = GF(p**2, name="i", modulus=[1, 0, 1])
E = EllipticCurve(F, [0, 6, 0, 1, 0])
E.set_order((p + 1) ** 2)

# Define generators of E[p+1] to avoid recomputing them
i = F.gens()[0]

Py0 = 0x60AD711E082F16D9F75123E93D365C356C60E0A2F454FEF4F2720D95BB6DD1AF983E68757D6B422D9BE60F933E030546AFCF9D083F12C07FFC8AD7593F819CFB975CAF1282A2B653571E0C3F9359840C4A8D51DB0A434DBDD40D8530CB6F92836432D45146D266255C0C877512793091A39901D6D6D59DC989F750BA92F27AE45DE486BA29D841B9736DE33B0E5A9B0FE5EB907BA28EDD0A91E2DAC6C1AEB08D068
Py1 = 0x14E5027864CC66B9C0BDC6EC56776A6A87442C11799A8D2B817E8B319943BD8F87C4435DF720AB3A1CF86B473E8953C258DB24AFAEA3137DA7923B85D3692D7537261F191E2BABD8161B1515C83E509454ABCBF93AE99980C8E4DBB814FADF41625109C80D82BDC043E7321A390895202DD46146C2EA31717E379BE69A8D7D30CEAE1E26ADD83B8871946BBD3D5AA46C8EE4900D0CF20F3D8EF644B337E88D2D3C4
Px0 = 2
Px1 = 1
P = E(Px0 + i * Px1, Py0 + i * Py1)

Qx0 = 20
Qx1 = 2
Qy0 = 0x37C3CAB67CE8AB5020CF6B1B8D85A35D7C123AD99E57200C4DC3907A45E62348721688FCDD463F954BDEB67092B2674F4C8E607D111A1BC9DBEF4DAA928E1E92FD721FC9EE8DB01E0FCAA70F1BEA582C1D06C26A55EF673ACF348D2A1849575F808D8C8D8884E2F7DFAEBDC41D27ED0D0CE639FFFBB8F0A1FF76A2474C890AD10B00506F8D4A4E5750978FC82EA8A5FBFC8811156268604614394D3EE1205E4686C
Qy1 = 0xCF92282ED56AFBB8C29EB1A65D45D1C9D1FF571FDD4F36ED7287F580B11B663C02A310AB99A22A1F839734D6B3F973A23889F14D32D1F355ACA203EEDF5A2FEB7BADED8DE0303922FBC9F616D1C43FCE6C7EDA1B326DEBAD961F977D2AAA016930D06414CAC009EBC73104AC66CDFEA2FF914DCA19DB704F98219172B4F846CA54F5C0B7FBAC1D5CECED54674866F95D02E1D533EE50159CBE3CCD1F390F6913DB5
Q = E(Qx0 + i * Qx1, Qy0 + i * Qy1)

K = KummerLine(E)
R = K(P)
S = K(Q)


def compute_isogeny(order):
    cofactor = (p + 1) // order
    ker = cofactor * R

    repeat = 50

    codomain = 10**100
    image = 10**100
    for _ in range(repeat):
        t0 = time.process_time_ns()
        psi = KummerLineIsogeny(K, ker, order)
        codomain = min(time.process_time_ns() - t0, codomain)

        t0 = time.process_time_ns()
        _ = psi(S)
        image = min(time.process_time_ns() - t0, image)

    codomain = codomain // (1000)
    image = image // (1000)

    return codomain, image


d1 = ZZ(0x16C1B23A83CA861E79769376C62F334BB8F6346C820A0E9BD6A652D42ECF246B9)
d2 = ZZ(0xDB6B524664D2555466FA41A3469CB451C0B756A33B3FDD8F09EDC26E4E9035DDF)
dA1_sqrt = ZZ(0x14D9C07F458B)
dA2_sqrt = ZZ(0xD4A42112B63144D6E2F7023)

data = []
for order in [dA1_sqrt, dA2_sqrt, d1, d2]:
    codomain, image = compute_isogeny(order)
    if order == d1:
        order_str = "d1"
    if order == d2:
        order_str = "d2"
    if order == dA1_sqrt:
        order_str = "dA1_sqrt"
    if order == dA2_sqrt:
        order_str = "dA2_sqrt"
    data.append([order_str, codomain, image])

data_table = tabulate(data, headers=["order", "codomain (us)", "image (us)"])
print(data_table)


"""
order       codomain (us)    image (us)
--------  ---------------  ------------
dA1_sqrt           191617         90979
dA2_sqrt           630941        292653
d1                 544490        124378
d2                 507033        132066

order       codomain (us)    image (us)
--------  ---------------  ------------
dA1_sqrt           183632         74246
dA2_sqrt           603106        244781
d1                 529321        110802
d2                 477758        108418


"""
